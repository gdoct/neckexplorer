// import React, { useState } from "react";
// import ColorPicker from "./ColorPicker"
// import { noteMappings, intervalMappings } from '../lib/musicology'
// import { presetScales } from '../lib/presets'

// interface ScaleBuilderProps {
//     onChange?: (scale: Array<{ interval: number, color: string }>) => void;
//     forceFlat?: boolean;
// }
// const ScaleBuilder: React.FC<ScaleBuilderProps> = ({ onChange, forceFlat }) => {
//     const [selectedNotes, setSelectedNotes] = useState<Array<{ note: number, flat: boolean, sharp: boolean, color: string }>>([]);
//     const initialcolors = ['red', 'lightgreen', 'chocolate',
//         'papayawhip', 'tan', 'thistle', 'orange',
//         'olive', 'gold', 'linen'];

//     function callOnChange(notes: Array<{ note: number, flat: boolean, sharp: boolean, color: string }>) {
//         if (onChange) {
//             const newNotes: Array<{ interval: number, color: string }> = [];
//             if (notes.length > 0) {
//                 for (let i = 0; i < notes.length; i++) {
//                     let { note, flat, sharp, color } = notes[i];
//                     let interval: number = intervalMappings[note];
//                     if (flat) interval--;
//                     if (sharp) interval++;
//                     newNotes.push({ interval: interval, color });
//                 }
//             }
//             onChange(newNotes);
//         }
//     }

//     const handleNoteChange = (note: number, isSharpChange: boolean, isFlatChange: boolean, checked: boolean) => {
//         setSelectedNotes(prevNotes => {
//             const newNotes = [...prevNotes];
//             const noteIndex = newNotes.findIndex(n => n.note === note);
//             if (noteIndex !== -1) {
//                 if (isSharpChange)
//                     newNotes[noteIndex].sharp = checked;
//                 else if (isFlatChange)
//                     newNotes[noteIndex].flat = checked;
//             } else {
//                 newNotes.push({ note, flat: false, sharp: false, color: initialcolors[note] });
//             }
//             callOnChange(newNotes);
//             return newNotes;
//         });
//     };

//     const handleColorChange = (note: number, color: string) => {
//         setSelectedNotes(prevNotes => {
//             const newNotes = [...prevNotes];
//             const noteIndex = newNotes.findIndex(n => n.note === note);
//             if (noteIndex !== -1) {
//                 newNotes[noteIndex].color = color;
//             }
//             callOnChange(newNotes);
//             return newNotes;
//         });
//     };

//     const handleIncludeChange = (note: number, included: boolean) => {
//         setSelectedNotes(prevNotes => {
//             const newnotes = (included) ?
//                 [...prevNotes, { note, color: initialcolors[note], flat: false, sharp: false }] :
//                 prevNotes.filter(n => n.note !== note);
//             callOnChange(newnotes);
//             return newnotes;
//         });
//     };

//     // Handle preset selection
//     const handlePresetChange = (presetIndex: number) => {
//         const selectedPreset = presetScales[presetIndex];
//         onChange && onChange(selectedPreset.notes);
//     };

//     return (
//         <div >
//             <select
//                 onChange={(e) => handlePresetChange(Number(e.target.value))}
//                 defaultValue="" // Set the default value to an empty string
//             >
//                 <option value="" >
//                     Choose a preset
//                 </option>
//                 {presetScales.map((scale, index) => (
//                     <option key={index} value={index}>
//                         {scale.scalename}
//                     </option>
//                 ))}
//             </select>
//             <div style={{display: 'none'}}>
//             {Array.from({ length: 10 }, (_, i) => i).map(note =>
//             (
//                 <div key={note} style={{ display: 'block' }}>
//                     <label>
//                         <ColorPicker initialColor={initialcolors[note]} onColorChange={newcolor => handleColorChange(note, newcolor)} />
//                     </label>
//                     <label>
//                         <input type="checkbox" checked={!!selectedNotes.find(n => n.note === note)} onChange={e => handleIncludeChange(note, e.target.checked)} />
//                         { }
//                         Note {noteMappings[note] + 1}:
//                         {note > 0 && (
//                             <>
//                                 <label>
//                                     <input type="checkbox" checked={!!selectedNotes.find(n => n.note === note && n.sharp)} onChange={e => handleNoteChange(note, true, false, e.target.checked)} />
//                                     Sharp
//                                 </label>
//                                 <label>
//                                     <input type="checkbox" checked={!!selectedNotes.find(n => n.note === note && n.flat)} onChange={e => handleNoteChange(note, false, true, e.target.checked)} />
//                                     Flat
//                                 </label>
//                             </>
//                         )}
//                     </label>
//                 </div>
//             ))}
//             </div>
//         </div>

//     );
// };

// export default ScaleBuilder;
